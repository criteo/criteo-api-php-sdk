<?php
/**
 * ProductSet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * ProductSet Class Doc Comment
 *
 * @category Class
 * @description Encapsulate a group of product
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductSet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductSet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dataset_id' => 'string',
        'name' => 'string',
        'minimum_number_of_products' => 'int',
        'status' => 'string',
        'number_of_products' => 'int',
        'creation_date' => 'string',
        'rules' => '\criteo\api\marketingsolutions\preview\Model\ProductSetRule[]',
        'client_type' => 'string',
        'keep_variant_products' => 'bool',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dataset_id' => null,
        'name' => null,
        'minimum_number_of_products' => 'int32',
        'status' => null,
        'number_of_products' => 'int32',
        'creation_date' => null,
        'rules' => null,
        'client_type' => null,
        'keep_variant_products' => null,
        'id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dataset_id' => false,
		'name' => false,
		'minimum_number_of_products' => false,
		'status' => false,
		'number_of_products' => true,
		'creation_date' => false,
		'rules' => false,
		'client_type' => false,
		'keep_variant_products' => false,
		'id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataset_id' => 'datasetId',
        'name' => 'name',
        'minimum_number_of_products' => 'minimumNumberOfProducts',
        'status' => 'status',
        'number_of_products' => 'numberOfProducts',
        'creation_date' => 'creationDate',
        'rules' => 'rules',
        'client_type' => 'clientType',
        'keep_variant_products' => 'keepVariantProducts',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataset_id' => 'setDatasetId',
        'name' => 'setName',
        'minimum_number_of_products' => 'setMinimumNumberOfProducts',
        'status' => 'setStatus',
        'number_of_products' => 'setNumberOfProducts',
        'creation_date' => 'setCreationDate',
        'rules' => 'setRules',
        'client_type' => 'setClientType',
        'keep_variant_products' => 'setKeepVariantProducts',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataset_id' => 'getDatasetId',
        'name' => 'getName',
        'minimum_number_of_products' => 'getMinimumNumberOfProducts',
        'status' => 'getStatus',
        'number_of_products' => 'getNumberOfProducts',
        'creation_date' => 'getCreationDate',
        'rules' => 'getRules',
        'client_type' => 'getClientType',
        'keep_variant_products' => 'getKeepVariantProducts',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_UNKNOWN = 'Unknown';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_PENDING = 'Pending';
    public const STATUS_VALID = 'Valid';
    public const STATUS_INVALID = 'Invalid';
    public const STATUS_DELETED = 'Deleted';
    public const CLIENT_TYPE_UNKNOWN = 'Unknown';
    public const CLIENT_TYPE_C_GROWTH = 'CGrowth';
    public const CLIENT_TYPE_C_MAX = 'CMax';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_DRAFT,
            self::STATUS_PENDING,
            self::STATUS_VALID,
            self::STATUS_INVALID,
            self::STATUS_DELETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClientTypeAllowableValues()
    {
        return [
            self::CLIENT_TYPE_UNKNOWN,
            self::CLIENT_TYPE_C_GROWTH,
            self::CLIENT_TYPE_C_MAX,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dataset_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('minimum_number_of_products', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('number_of_products', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('client_type', $data ?? [], null);
        $this->setIfExists('keep_variant_products', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dataset_id'] === null) {
            $invalidProperties[] = "'dataset_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['minimum_number_of_products'] === null) {
            $invalidProperties[] = "'minimum_number_of_products' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['number_of_products'] === null) {
            $invalidProperties[] = "'number_of_products' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['rules'] === null) {
            $invalidProperties[] = "'rules' can't be null";
        }
        if ($this->container['client_type'] === null) {
            $invalidProperties[] = "'client_type' can't be null";
        }
        $allowedValues = $this->getClientTypeAllowableValues();
        if (!is_null($this->container['client_type']) && !in_array($this->container['client_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'client_type', must be one of '%s'",
                $this->container['client_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['keep_variant_products'] === null) {
            $invalidProperties[] = "'keep_variant_products' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dataset_id
     *
     * @return string
     */
    public function getDatasetId()
    {
        return $this->container['dataset_id'];
    }

    /**
     * Sets dataset_id
     *
     * @param string $dataset_id The dataset to which the product set belong
     *
     * @return self
     */
    public function setDatasetId($dataset_id)
    {
        if (is_null($dataset_id)) {
            throw new \InvalidArgumentException('non-nullable dataset_id cannot be null');
        }
        $this->container['dataset_id'] = $dataset_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the product set
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets minimum_number_of_products
     *
     * @return int
     */
    public function getMinimumNumberOfProducts()
    {
        return $this->container['minimum_number_of_products'];
    }

    /**
     * Sets minimum_number_of_products
     *
     * @param int $minimum_number_of_products Minimum amount of products that should match the product set to consider it valid.  Greater or equal than one.
     *
     * @return self
     */
    public function setMinimumNumberOfProducts($minimum_number_of_products)
    {
        if (is_null($minimum_number_of_products)) {
            throw new \InvalidArgumentException('non-nullable minimum_number_of_products cannot be null');
        }
        $this->container['minimum_number_of_products'] = $minimum_number_of_products;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the product set
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets number_of_products
     *
     * @return int
     */
    public function getNumberOfProducts()
    {
        return $this->container['number_of_products'];
    }

    /**
     * Sets number_of_products
     *
     * @param int $number_of_products The number of product matching the product set.  Can be null for newly created product set.
     *
     * @return self
     */
    public function setNumberOfProducts($number_of_products)
    {
        if (is_null($number_of_products)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_products');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_products', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_products'] = $number_of_products;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date The creation date of the product set (UTC time in ISO8601 format). Example: \"02/25/2022 14:51:26\".  Can be null if the value isn't available.
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ProductSetRule[]
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ProductSetRule[] $rules The rules identifying the product belonging to the set
     *
     * @return self
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            throw new \InvalidArgumentException('non-nullable rules cannot be null');
        }
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets client_type
     *
     * @return string
     */
    public function getClientType()
    {
        return $this->container['client_type'];
    }

    /**
     * Sets client_type
     *
     * @param string $client_type The client type of the product set
     *
     * @return self
     */
    public function setClientType($client_type)
    {
        if (is_null($client_type)) {
            throw new \InvalidArgumentException('non-nullable client_type cannot be null');
        }
        $allowedValues = $this->getClientTypeAllowableValues();
        if (!in_array($client_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'client_type', must be one of '%s'",
                    $client_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['client_type'] = $client_type;

        return $this;
    }

    /**
     * Gets keep_variant_products
     *
     * @return bool
     */
    public function getKeepVariantProducts()
    {
        return $this->container['keep_variant_products'];
    }

    /**
     * Sets keep_variant_products
     *
     * @param bool $keep_variant_products keep_variant_products
     *
     * @return self
     */
    public function setKeepVariantProducts($keep_variant_products)
    {
        if (is_null($keep_variant_products)) {
            throw new \InvalidArgumentException('non-nullable keep_variant_products cannot be null');
        }
        $this->container['keep_variant_products'] = $keep_variant_products;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


