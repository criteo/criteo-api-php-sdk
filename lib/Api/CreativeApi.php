<?php
/**
 * CreativeApi
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\v2024_01
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - MarketingSolutions
 *
 * The version of the OpenAPI document: 2024-01
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\v2024_01\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\marketingsolutions\v2024_01\ApiException;
use criteo\api\marketingsolutions\v2024_01\Configuration;
use criteo\api\marketingsolutions\v2024_01\HeaderSelector;
use criteo\api\marketingsolutions\v2024_01\ObjectSerializer;

/**
 * CreativeApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\v2024_01
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CreativeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAdvertiserAd' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createAdvertiserCoupon' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'createAdvertiserCreative' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'deleteAd' => [
            'application/json',
        ],
        'deleteAdvertiserCoupon' => [
            'application/json',
        ],
        'deleteCreative' => [
            'application/json',
        ],
        'editAdvertiserCoupon' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'editCreative' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'generateCreativePreview' => [
            'application/json',
        ],
        'getAd' => [
            'application/json',
        ],
        'getAdvertiserAds' => [
            'application/json',
        ],
        'getAdvertiserCoupon' => [
            'application/json',
        ],
        'getAdvertiserCouponPreview' => [
            'application/json',
        ],
        'getAdvertiserCouponSupportedSizes' => [
            'application/json',
        ],
        'getAdvertiserCoupons' => [
            'application/json',
        ],
        'getAdvertiserCreatives' => [
            'application/json',
        ],
        'getCreative' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAdvertiserAd
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfAdWrite $resource_input_of_ad_write resource_input_of_ad_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserAd'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd
     */
    public function createAdvertiserAd($advertiser_id, $resource_input_of_ad_write, string $contentType = self::contentTypes['createAdvertiserAd'][0])
    {
        list($response) = $this->createAdvertiserAdWithHttpInfo($advertiser_id, $resource_input_of_ad_write, $contentType);
        return $response;
    }

    /**
     * Operation createAdvertiserAdWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfAdWrite $resource_input_of_ad_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserAd'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdvertiserAdWithHttpInfo($advertiser_id, $resource_input_of_ad_write, string $contentType = self::contentTypes['createAdvertiserAd'][0])
    {
        $request = $this->createAdvertiserAdRequest($advertiser_id, $resource_input_of_ad_write, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdvertiserAdAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfAdWrite $resource_input_of_ad_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdvertiserAdAsync($advertiser_id, $resource_input_of_ad_write, string $contentType = self::contentTypes['createAdvertiserAd'][0])
    {
        return $this->createAdvertiserAdAsyncWithHttpInfo($advertiser_id, $resource_input_of_ad_write, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdvertiserAdAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfAdWrite $resource_input_of_ad_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdvertiserAdAsyncWithHttpInfo($advertiser_id, $resource_input_of_ad_write, string $contentType = self::contentTypes['createAdvertiserAd'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd';
        $request = $this->createAdvertiserAdRequest($advertiser_id, $resource_input_of_ad_write, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdvertiserAd'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfAdWrite $resource_input_of_ad_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdvertiserAdRequest($advertiser_id, $resource_input_of_ad_write, string $contentType = self::contentTypes['createAdvertiserAd'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling createAdvertiserAd'
            );
        }

        // verify the required parameter 'resource_input_of_ad_write' is set
        if ($resource_input_of_ad_write === null || (is_array($resource_input_of_ad_write) && count($resource_input_of_ad_write) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_input_of_ad_write when calling createAdvertiserAd'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/ads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resource_input_of_ad_write)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resource_input_of_ad_write));
            } else {
                $httpBody = $resource_input_of_ad_write;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAdvertiserCoupon
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreateCoupon $resource_input_of_create_coupon resource_input_of_create_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon
     */
    public function createAdvertiserCoupon($advertiser_id, $resource_input_of_create_coupon, string $contentType = self::contentTypes['createAdvertiserCoupon'][0])
    {
        list($response) = $this->createAdvertiserCouponWithHttpInfo($advertiser_id, $resource_input_of_create_coupon, $contentType);
        return $response;
    }

    /**
     * Operation createAdvertiserCouponWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreateCoupon $resource_input_of_create_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdvertiserCouponWithHttpInfo($advertiser_id, $resource_input_of_create_coupon, string $contentType = self::contentTypes['createAdvertiserCoupon'][0])
    {
        $request = $this->createAdvertiserCouponRequest($advertiser_id, $resource_input_of_create_coupon, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdvertiserCouponAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreateCoupon $resource_input_of_create_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdvertiserCouponAsync($advertiser_id, $resource_input_of_create_coupon, string $contentType = self::contentTypes['createAdvertiserCoupon'][0])
    {
        return $this->createAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $resource_input_of_create_coupon, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdvertiserCouponAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreateCoupon $resource_input_of_create_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $resource_input_of_create_coupon, string $contentType = self::contentTypes['createAdvertiserCoupon'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon';
        $request = $this->createAdvertiserCouponRequest($advertiser_id, $resource_input_of_create_coupon, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdvertiserCoupon'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreateCoupon $resource_input_of_create_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdvertiserCouponRequest($advertiser_id, $resource_input_of_create_coupon, string $contentType = self::contentTypes['createAdvertiserCoupon'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling createAdvertiserCoupon'
            );
        }

        // verify the required parameter 'resource_input_of_create_coupon' is set
        if ($resource_input_of_create_coupon === null || (is_array($resource_input_of_create_coupon) && count($resource_input_of_create_coupon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_input_of_create_coupon when calling createAdvertiserCoupon'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resource_input_of_create_coupon)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resource_input_of_create_coupon));
            } else {
                $httpBody = $resource_input_of_create_coupon;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAdvertiserCreative
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative
     */
    public function createAdvertiserCreative($advertiser_id, $resource_input_of_creative_write, string $contentType = self::contentTypes['createAdvertiserCreative'][0])
    {
        list($response) = $this->createAdvertiserCreativeWithHttpInfo($advertiser_id, $resource_input_of_creative_write, $contentType);
        return $response;
    }

    /**
     * Operation createAdvertiserCreativeWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdvertiserCreativeWithHttpInfo($advertiser_id, $resource_input_of_creative_write, string $contentType = self::contentTypes['createAdvertiserCreative'][0])
    {
        $request = $this->createAdvertiserCreativeRequest($advertiser_id, $resource_input_of_creative_write, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdvertiserCreativeAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdvertiserCreativeAsync($advertiser_id, $resource_input_of_creative_write, string $contentType = self::contentTypes['createAdvertiserCreative'][0])
    {
        return $this->createAdvertiserCreativeAsyncWithHttpInfo($advertiser_id, $resource_input_of_creative_write, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdvertiserCreativeAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdvertiserCreativeAsyncWithHttpInfo($advertiser_id, $resource_input_of_creative_write, string $contentType = self::contentTypes['createAdvertiserCreative'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative';
        $request = $this->createAdvertiserCreativeRequest($advertiser_id, $resource_input_of_creative_write, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdvertiserCreative'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAdvertiserCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdvertiserCreativeRequest($advertiser_id, $resource_input_of_creative_write, string $contentType = self::contentTypes['createAdvertiserCreative'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling createAdvertiserCreative'
            );
        }

        // verify the required parameter 'resource_input_of_creative_write' is set
        if ($resource_input_of_creative_write === null || (is_array($resource_input_of_creative_write) && count($resource_input_of_creative_write) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_input_of_creative_write when calling createAdvertiserCreative'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/creatives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resource_input_of_creative_write)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resource_input_of_creative_write));
            } else {
                $httpBody = $resource_input_of_creative_write;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAd
     *
     * @param  int $id The ad identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAd'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAd($id, string $contentType = self::contentTypes['deleteAd'][0])
    {
        $this->deleteAdWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteAdWithHttpInfo
     *
     * @param  int $id The ad identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAd'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdWithHttpInfo($id, string $contentType = self::contentTypes['deleteAd'][0])
    {
        $request = $this->deleteAdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdAsync
     *
     * @param  int $id The ad identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdAsync($id, string $contentType = self::contentTypes['deleteAd'][0])
    {
        return $this->deleteAdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdAsyncWithHttpInfo
     *
     * @param  int $id The ad identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteAd'][0])
    {
        $returnType = '';
        $request = $this->deleteAdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAd'
     *
     * @param  int $id The ad identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdRequest($id, string $contentType = self::contentTypes['deleteAd'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAd'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/ads/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAdvertiserCoupon
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAdvertiserCoupon($advertiser_id, $id, string $contentType = self::contentTypes['deleteAdvertiserCoupon'][0])
    {
        $this->deleteAdvertiserCouponWithHttpInfo($advertiser_id, $id, $contentType);
    }

    /**
     * Operation deleteAdvertiserCouponWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdvertiserCouponWithHttpInfo($advertiser_id, $id, string $contentType = self::contentTypes['deleteAdvertiserCoupon'][0])
    {
        $request = $this->deleteAdvertiserCouponRequest($advertiser_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdvertiserCouponAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserCouponAsync($advertiser_id, $id, string $contentType = self::contentTypes['deleteAdvertiserCoupon'][0])
    {
        return $this->deleteAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdvertiserCouponAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $id, string $contentType = self::contentTypes['deleteAdvertiserCoupon'][0])
    {
        $returnType = '';
        $request = $this->deleteAdvertiserCouponRequest($advertiser_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdvertiserCoupon'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdvertiserCouponRequest($advertiser_id, $id, string $contentType = self::contentTypes['deleteAdvertiserCoupon'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling deleteAdvertiserCoupon'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAdvertiserCoupon'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCreative
     *
     * @param  string $id The creative identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCreative($id, string $contentType = self::contentTypes['deleteCreative'][0])
    {
        $this->deleteCreativeWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteCreativeWithHttpInfo
     *
     * @param  string $id The creative identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCreativeWithHttpInfo($id, string $contentType = self::contentTypes['deleteCreative'][0])
    {
        $request = $this->deleteCreativeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCreativeAsync
     *
     * @param  string $id The creative identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCreativeAsync($id, string $contentType = self::contentTypes['deleteCreative'][0])
    {
        return $this->deleteCreativeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCreativeAsyncWithHttpInfo
     *
     * @param  string $id The creative identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCreativeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteCreative'][0])
    {
        $returnType = '';
        $request = $this->deleteCreativeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCreative'
     *
     * @param  string $id The creative identifier to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCreativeRequest($id, string $contentType = self::contentTypes['deleteCreative'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCreative'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/creatives/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editAdvertiserCoupon
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfUpdateCoupon $resource_input_of_update_coupon resource_input_of_update_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon
     */
    public function editAdvertiserCoupon($advertiser_id, $id, $resource_input_of_update_coupon, string $contentType = self::contentTypes['editAdvertiserCoupon'][0])
    {
        list($response) = $this->editAdvertiserCouponWithHttpInfo($advertiser_id, $id, $resource_input_of_update_coupon, $contentType);
        return $response;
    }

    /**
     * Operation editAdvertiserCouponWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfUpdateCoupon $resource_input_of_update_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function editAdvertiserCouponWithHttpInfo($advertiser_id, $id, $resource_input_of_update_coupon, string $contentType = self::contentTypes['editAdvertiserCoupon'][0])
    {
        $request = $this->editAdvertiserCouponRequest($advertiser_id, $id, $resource_input_of_update_coupon, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editAdvertiserCouponAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfUpdateCoupon $resource_input_of_update_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editAdvertiserCouponAsync($advertiser_id, $id, $resource_input_of_update_coupon, string $contentType = self::contentTypes['editAdvertiserCoupon'][0])
    {
        return $this->editAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $id, $resource_input_of_update_coupon, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editAdvertiserCouponAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfUpdateCoupon $resource_input_of_update_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $id, $resource_input_of_update_coupon, string $contentType = self::contentTypes['editAdvertiserCoupon'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon';
        $request = $this->editAdvertiserCouponRequest($advertiser_id, $id, $resource_input_of_update_coupon, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editAdvertiserCoupon'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfUpdateCoupon $resource_input_of_update_coupon (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editAdvertiserCouponRequest($advertiser_id, $id, $resource_input_of_update_coupon, string $contentType = self::contentTypes['editAdvertiserCoupon'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling editAdvertiserCoupon'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling editAdvertiserCoupon'
            );
        }

        // verify the required parameter 'resource_input_of_update_coupon' is set
        if ($resource_input_of_update_coupon === null || (is_array($resource_input_of_update_coupon) && count($resource_input_of_update_coupon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_input_of_update_coupon when calling editAdvertiserCoupon'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resource_input_of_update_coupon)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resource_input_of_update_coupon));
            } else {
                $httpBody = $resource_input_of_update_coupon;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editCreative
     *
     * @param  string $id The creative identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative
     */
    public function editCreative($id, $resource_input_of_creative_write, string $contentType = self::contentTypes['editCreative'][0])
    {
        list($response) = $this->editCreativeWithHttpInfo($id, $resource_input_of_creative_write, $contentType);
        return $response;
    }

    /**
     * Operation editCreativeWithHttpInfo
     *
     * @param  string $id The creative identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative, HTTP status code, HTTP response headers (array of strings)
     */
    public function editCreativeWithHttpInfo($id, $resource_input_of_creative_write, string $contentType = self::contentTypes['editCreative'][0])
    {
        $request = $this->editCreativeRequest($id, $resource_input_of_creative_write, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editCreativeAsync
     *
     * @param  string $id The creative identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editCreativeAsync($id, $resource_input_of_creative_write, string $contentType = self::contentTypes['editCreative'][0])
    {
        return $this->editCreativeAsyncWithHttpInfo($id, $resource_input_of_creative_write, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editCreativeAsyncWithHttpInfo
     *
     * @param  string $id The creative identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editCreativeAsyncWithHttpInfo($id, $resource_input_of_creative_write, string $contentType = self::contentTypes['editCreative'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative';
        $request = $this->editCreativeRequest($id, $resource_input_of_creative_write, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editCreative'
     *
     * @param  string $id The creative identifier to edit. (required)
     * @param  \criteo\api\marketingsolutions\v2024_01\Model\ResourceInputOfCreativeWrite $resource_input_of_creative_write (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editCreativeRequest($id, $resource_input_of_creative_write, string $contentType = self::contentTypes['editCreative'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling editCreative'
            );
        }

        // verify the required parameter 'resource_input_of_creative_write' is set
        if ($resource_input_of_creative_write === null || (is_array($resource_input_of_creative_write) && count($resource_input_of_creative_write) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_input_of_creative_write when calling editCreative'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/creatives/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resource_input_of_creative_write)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resource_input_of_creative_write));
            } else {
                $httpBody = $resource_input_of_creative_write;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateCreativePreview
     *
     * @param  string $id The Creative identifier to preview. (required)
     * @param  int $width The width of the Creative to preview. (optional)
     * @param  int $height The height of the Creative to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCreativePreview'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function generateCreativePreview($id, $width = null, $height = null, string $contentType = self::contentTypes['generateCreativePreview'][0])
    {
        list($response) = $this->generateCreativePreviewWithHttpInfo($id, $width, $height, $contentType);
        return $response;
    }

    /**
     * Operation generateCreativePreviewWithHttpInfo
     *
     * @param  string $id The Creative identifier to preview. (required)
     * @param  int $width The width of the Creative to preview. (optional)
     * @param  int $height The height of the Creative to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCreativePreview'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateCreativePreviewWithHttpInfo($id, $width = null, $height = null, string $contentType = self::contentTypes['generateCreativePreview'][0])
    {
        $request = $this->generateCreativePreviewRequest($id, $width, $height, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateCreativePreviewAsync
     *
     * @param  string $id The Creative identifier to preview. (required)
     * @param  int $width The width of the Creative to preview. (optional)
     * @param  int $height The height of the Creative to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCreativePreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCreativePreviewAsync($id, $width = null, $height = null, string $contentType = self::contentTypes['generateCreativePreview'][0])
    {
        return $this->generateCreativePreviewAsyncWithHttpInfo($id, $width, $height, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateCreativePreviewAsyncWithHttpInfo
     *
     * @param  string $id The Creative identifier to preview. (required)
     * @param  int $width The width of the Creative to preview. (optional)
     * @param  int $height The height of the Creative to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCreativePreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCreativePreviewAsyncWithHttpInfo($id, $width = null, $height = null, string $contentType = self::contentTypes['generateCreativePreview'][0])
    {
        $returnType = 'string';
        $request = $this->generateCreativePreviewRequest($id, $width, $height, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateCreativePreview'
     *
     * @param  string $id The Creative identifier to preview. (required)
     * @param  int $width The width of the Creative to preview. (optional)
     * @param  int $height The height of the Creative to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateCreativePreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateCreativePreviewRequest($id, $width = null, $height = null, string $contentType = self::contentTypes['generateCreativePreview'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling generateCreativePreview'
            );
        }




        $resourcePath = '/2024-01/marketing-solutions/creatives/{id}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/html', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAd
     *
     * @param  int $id The ad identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAd'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd
     */
    public function getAd($id, string $contentType = self::contentTypes['getAd'][0])
    {
        list($response) = $this->getAdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getAdWithHttpInfo
     *
     * @param  int $id The ad identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAd'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdWithHttpInfo($id, string $contentType = self::contentTypes['getAd'][0])
    {
        $request = $this->getAdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdAsync
     *
     * @param  int $id The ad identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAsync($id, string $contentType = self::contentTypes['getAd'][0])
    {
        return $this->getAdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdAsyncWithHttpInfo
     *
     * @param  int $id The ad identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAd'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfAd';
        $request = $this->getAdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAd'
     *
     * @param  int $id The ad identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdRequest($id, string $contentType = self::contentTypes['getAd'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAd'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/ads/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserAds
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of ads to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserAds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd
     */
    public function getAdvertiserAds($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserAds'][0])
    {
        list($response) = $this->getAdvertiserAdsWithHttpInfo($advertiser_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserAdsWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of ads to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserAds'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserAdsWithHttpInfo($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserAds'][0])
    {
        $request = $this->getAdvertiserAdsRequest($advertiser_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserAdsAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of ads to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserAdsAsync($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserAds'][0])
    {
        return $this->getAdvertiserAdsAsyncWithHttpInfo($advertiser_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserAdsAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of ads to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserAdsAsyncWithHttpInfo($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserAds'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfAd';
        $request = $this->getAdvertiserAdsRequest($advertiser_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserAds'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of ads to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of ads. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserAdsRequest($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserAds'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserAds'
            );
        }




        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/ads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserCoupon
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon
     */
    public function getAdvertiserCoupon($advertiser_id, $id, string $contentType = self::contentTypes['getAdvertiserCoupon'][0])
    {
        list($response) = $this->getAdvertiserCouponWithHttpInfo($advertiser_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserCouponWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserCouponWithHttpInfo($advertiser_id, $id, string $contentType = self::contentTypes['getAdvertiserCoupon'][0])
    {
        $request = $this->getAdvertiserCouponRequest($advertiser_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserCouponAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponAsync($advertiser_id, $id, string $contentType = self::contentTypes['getAdvertiserCoupon'][0])
    {
        return $this->getAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserCouponAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponAsyncWithHttpInfo($advertiser_id, $id, string $contentType = self::contentTypes['getAdvertiserCoupon'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCoupon';
        $request = $this->getAdvertiserCouponRequest($advertiser_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserCoupon'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserCouponRequest($advertiser_id, $id, string $contentType = self::contentTypes['getAdvertiserCoupon'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserCoupon'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAdvertiserCoupon'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserCouponPreview
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to preview. (required)
     * @param  int $width The width of the coupon to preview. (optional)
     * @param  int $height The height of the coupon to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponPreview'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getAdvertiserCouponPreview($advertiser_id, $id, $width = null, $height = null, string $contentType = self::contentTypes['getAdvertiserCouponPreview'][0])
    {
        list($response) = $this->getAdvertiserCouponPreviewWithHttpInfo($advertiser_id, $id, $width, $height, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserCouponPreviewWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to preview. (required)
     * @param  int $width The width of the coupon to preview. (optional)
     * @param  int $height The height of the coupon to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponPreview'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserCouponPreviewWithHttpInfo($advertiser_id, $id, $width = null, $height = null, string $contentType = self::contentTypes['getAdvertiserCouponPreview'][0])
    {
        $request = $this->getAdvertiserCouponPreviewRequest($advertiser_id, $id, $width, $height, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserCouponPreviewAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to preview. (required)
     * @param  int $width The width of the coupon to preview. (optional)
     * @param  int $height The height of the coupon to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponPreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponPreviewAsync($advertiser_id, $id, $width = null, $height = null, string $contentType = self::contentTypes['getAdvertiserCouponPreview'][0])
    {
        return $this->getAdvertiserCouponPreviewAsyncWithHttpInfo($advertiser_id, $id, $width, $height, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserCouponPreviewAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to preview. (required)
     * @param  int $width The width of the coupon to preview. (optional)
     * @param  int $height The height of the coupon to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponPreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponPreviewAsyncWithHttpInfo($advertiser_id, $id, $width = null, $height = null, string $contentType = self::contentTypes['getAdvertiserCouponPreview'][0])
    {
        $returnType = 'string';
        $request = $this->getAdvertiserCouponPreviewRequest($advertiser_id, $id, $width, $height, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserCouponPreview'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $id The Coupon identifier to preview. (required)
     * @param  int $width The width of the coupon to preview. (optional)
     * @param  int $height The height of the coupon to preview. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponPreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserCouponPreviewRequest($advertiser_id, $id, $width = null, $height = null, string $contentType = self::contentTypes['getAdvertiserCouponPreview'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserCouponPreview'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAdvertiserCouponPreview'
            );
        }




        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons/{id}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/html', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserCouponSupportedSizes
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $ad_set_id The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponSupportedSizes'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes
     */
    public function getAdvertiserCouponSupportedSizes($advertiser_id, $ad_set_id = null, string $contentType = self::contentTypes['getAdvertiserCouponSupportedSizes'][0])
    {
        list($response) = $this->getAdvertiserCouponSupportedSizesWithHttpInfo($advertiser_id, $ad_set_id, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserCouponSupportedSizesWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $ad_set_id The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponSupportedSizes'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserCouponSupportedSizesWithHttpInfo($advertiser_id, $ad_set_id = null, string $contentType = self::contentTypes['getAdvertiserCouponSupportedSizes'][0])
    {
        $request = $this->getAdvertiserCouponSupportedSizesRequest($advertiser_id, $ad_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserCouponSupportedSizesAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $ad_set_id The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponSupportedSizes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponSupportedSizesAsync($advertiser_id, $ad_set_id = null, string $contentType = self::contentTypes['getAdvertiserCouponSupportedSizes'][0])
    {
        return $this->getAdvertiserCouponSupportedSizesAsyncWithHttpInfo($advertiser_id, $ad_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserCouponSupportedSizesAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $ad_set_id The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponSupportedSizes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponSupportedSizesAsyncWithHttpInfo($advertiser_id, $ad_set_id = null, string $contentType = self::contentTypes['getAdvertiserCouponSupportedSizes'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCouponSupportedSizes';
        $request = $this->getAdvertiserCouponSupportedSizesRequest($advertiser_id, $ad_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserCouponSupportedSizes'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  string $ad_set_id The ad set id on which you want to check the Coupon supported sizes. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCouponSupportedSizes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserCouponSupportedSizesRequest($advertiser_id, $ad_set_id = null, string $contentType = self::contentTypes['getAdvertiserCouponSupportedSizes'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserCouponSupportedSizes'
            );
        }



        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons-supported-sizes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ad_set_id,
            'ad-set-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserCoupons
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of coupons to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupons'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon
     */
    public function getAdvertiserCoupons($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCoupons'][0])
    {
        list($response) = $this->getAdvertiserCouponsWithHttpInfo($advertiser_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserCouponsWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of coupons to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupons'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserCouponsWithHttpInfo($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCoupons'][0])
    {
        $request = $this->getAdvertiserCouponsRequest($advertiser_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserCouponsAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of coupons to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponsAsync($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCoupons'][0])
    {
        return $this->getAdvertiserCouponsAsyncWithHttpInfo($advertiser_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserCouponsAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of coupons to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCouponsAsyncWithHttpInfo($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCoupons'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCoupon';
        $request = $this->getAdvertiserCouponsRequest($advertiser_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserCoupons'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of coupons to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of coupons. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCoupons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserCouponsRequest($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCoupons'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserCoupons'
            );
        }




        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserCreatives
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of creatives to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCreatives'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative
     */
    public function getAdvertiserCreatives($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCreatives'][0])
    {
        list($response) = $this->getAdvertiserCreativesWithHttpInfo($advertiser_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserCreativesWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of creatives to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCreatives'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserCreativesWithHttpInfo($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCreatives'][0])
    {
        $request = $this->getAdvertiserCreativesRequest($advertiser_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserCreativesAsync
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of creatives to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCreatives'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCreativesAsync($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCreatives'][0])
    {
        return $this->getAdvertiserCreativesAsyncWithHttpInfo($advertiser_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserCreativesAsyncWithHttpInfo
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of creatives to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCreatives'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserCreativesAsyncWithHttpInfo($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCreatives'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceCollectionOutcomeOfCreative';
        $request = $this->getAdvertiserCreativesRequest($advertiser_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserCreatives'
     *
     * @param  string $advertiser_id The advertiser identifier. (required)
     * @param  int $limit The number of creatives to be returned. The default is 50. (optional)
     * @param  int $offset The (zero-based) offset into the collection of creatives. The default is 0. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserCreatives'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserCreativesRequest($advertiser_id, $limit = null, $offset = null, string $contentType = self::contentTypes['getAdvertiserCreatives'][0])
    {

        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserCreatives'
            );
        }




        $resourcePath = '/2024-01/marketing-solutions/advertisers/{advertiser-id}/creatives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiser-id' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCreative
     *
     * @param  string $id The creative identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative
     */
    public function getCreative($id, string $contentType = self::contentTypes['getCreative'][0])
    {
        list($response) = $this->getCreativeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getCreativeWithHttpInfo
     *
     * @param  string $id The creative identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreative'] to see the possible values for this operation
     *
     * @throws \criteo\api\marketingsolutions\v2024_01\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCreativeWithHttpInfo($id, string $contentType = self::contentTypes['getCreative'][0])
    {
        $request = $this->getCreativeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCreativeAsync
     *
     * @param  string $id The creative identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCreativeAsync($id, string $contentType = self::contentTypes['getCreative'][0])
    {
        return $this->getCreativeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCreativeAsyncWithHttpInfo
     *
     * @param  string $id The creative identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCreativeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getCreative'][0])
    {
        $returnType = '\criteo\api\marketingsolutions\v2024_01\Model\ResourceOutcomeOfCreative';
        $request = $this->getCreativeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCreative'
     *
     * @param  string $id The creative identifier to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCreative'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCreativeRequest($id, string $contentType = self::contentTypes['getCreative'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCreative'
            );
        }


        $resourcePath = '/2024-01/marketing-solutions/creatives/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
